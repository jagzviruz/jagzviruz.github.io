{"componentChunkName":"component---src-templates-post-js","path":"/max-min-stack","result":{"data":{"markdownRemark":{"html":"<p>This is a variation on the a Leetcode <a href=\"\">question</a></p>\n<h3 id=\"question\" style=\"position:relative;\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h3>\n<p>Design a structure that is similar to a stack such that it supports <code class=\"language-text\">push</code>, <code class=\"language-text\">pop</code>, <code class=\"language-text\">top</code>, and retrieving the minimum and maximum elements in constant time.</p>\n<p><em>push(x)</em> — Push element x onto stack.\n<em>pop()</em> — Removes the element on top of the stack.\n<em>top()</em> — Get the top element.\n<em>getMin()</em> — Retrieve the minimum element in the stack.\n<em>getMax()</em> — Retrieve the maximum element in the stack.</p>\n<h3 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h3>\n<p>In a usual <code class=\"language-text\">stack</code> data structure, time to fetch the <code class=\"language-text\">max</code> or <code class=\"language-text\">min</code> item would depend on the order in which elements had been <code class=\"language-text\">pushed</code> into it. You would have to <code class=\"language-text\">pop</code> out all items and find the minimum element, and push back all the items into it such that the items are not lost.</p>\n<p>To implement it with constant retrieval time, you can use an additinoal <code class=\"language-text\">dequeue</code> structure such that, the head of the queue gets the global minima, and the tail gets the global maxima. It stores duplicate values of the minima and maxima such that, even if a ‘max’ or ‘min’ element is popped out, you will still know the global maxima/minima.</p>\n<p>Since JS doesn’t have a <code class=\"language-text\">queue</code> structure, we use an array to achieve that behavior.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MaxMinStack</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">MAX</span> <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">MIN</span> <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> itemStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dequeue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">push</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">>=</span> <span class=\"token constant\">MAX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">MAX</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n      dequeue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">MIN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">MIN</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n      dequeue<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    itemStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> itemStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">==</span> <span class=\"token constant\">MAX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      dequeue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token constant\">MAX</span> <span class=\"token operator\">=</span> dequeue<span class=\"token punctuation\">[</span>dequeue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">==</span> <span class=\"token constant\">MIN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      dequeue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token constant\">MIN</span> <span class=\"token operator\">=</span> dequeue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">top</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> itemStack<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> size <span class=\"token operator\">?</span> dequeue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Stack is empty'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMax</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> size <span class=\"token operator\">?</span> dequeue<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Stack is empty'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    push<span class=\"token punctuation\">,</span>\n    pop<span class=\"token punctuation\">,</span>\n    top<span class=\"token punctuation\">,</span>\n    getMin<span class=\"token punctuation\">,</span>\n    getMax<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<iframe height=\"1000px\" width=\"100%\" src=\"https://repl.it/@jagzviruz/MaxMinStack?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","frontmatter":{"title":"Implement a Max/Min Stack","date":"2020-08-26T21:56","tags":["stack","leetcode","javascript","queue"],"spoiler":"Implement a stack data structure such that the maximum and minimum elements can be retrieved in *O(1)* time.","keywords":["stack","javascript","puzzle","dequeue"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/max-min-stack","previous":{"fields":{"slug":"/move-zeroes"},"frontmatter":{"title":"Move zeroes to end"}},"next":{"fields":{"slug":"/longest-substring-without-repeating-characters"},"frontmatter":{"title":"Longest substring without repeating characters"}}}},"staticQueryHashes":["436878334","676376647"]}