{"componentChunkName":"component---src-templates-post-js","path":"/string-to-integer","result":{"data":{"markdownRemark":{"html":"<h3 id=\"question\" style=\"position:relative;\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h3>\n<p>Implement <em>atoi</em> which converts a string to an integer.</p>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in <em>str</em> is not a valid integral number, or if no such sequence exists because either <em>str</em> is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a <em>zero value</em> is returned.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Only the space character ’ ’ is considered as whitespace character.</li>\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: <em>[−2<sup>31</sup>,  2<sup>31</sup> − 1]</em>. If the numerical value is out of the range of representable values, <em>INT_MAX (2<sup>31</sup> − 1)</em> or <em>INT_MIN (−2<sup>31</sup>)</em> is returned.</li>\n</ul>\n<p><em>Example 1:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"42\"\nOutput: 42</code></pre></div>\n<p><em>Example 2:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n             Then take as many numerical digits as possible, which gets 42.</code></pre></div>\n<p><em>Example 3:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.</code></pre></div>\n<p><em>Example 4:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"words and 987\"\nOutput: 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical\n             digit or a +/- sign. Therefore no valid conversion could be performed.</code></pre></div>\n<p><em>Example 5:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"-91283472332\"\nOutput: -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n             Thefore INT_MIN (−231) is returned.</code></pre></div>\n<h3 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} str\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myAtoi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ascii</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">INT_MAX</span> <span class=\"token operator\">=</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">INT_MIN</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">PLUS</span> <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">MINUS</span> <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">ZERO</span> <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">NINE</span> <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">SPACE</span> <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotDigit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ZERO</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">></span> <span class=\"token constant\">NINE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isOperator</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">PLUS</span><span class=\"token operator\">:</span>\n                sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">MINUS</span><span class=\"token operator\">:</span>\n                sign <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> numChars <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> integerValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> operatorFound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> digitFound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> asciiValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>numChars<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        asciiValue <span class=\"token operator\">=</span> <span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> asciiValue <span class=\"token operator\">===</span> <span class=\"token constant\">SPACE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>digitFound <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>operatorFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>digitFound <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>operatorFound <span class=\"token operator\">&amp;&amp;</span>\n           <span class=\"token function\">isOperator</span><span class=\"token punctuation\">(</span>asciiValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            operatorFound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNotDigit</span><span class=\"token punctuation\">(</span>asciiValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            integerValue <span class=\"token operator\">=</span> integerValue <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>asciiValue <span class=\"token operator\">-</span> <span class=\"token constant\">ZERO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            digitFound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    integerValue <span class=\"token operator\">=</span> integerValue <span class=\"token operator\">*</span> sign<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>integerValue <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">INT_MIN</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">INT_MIN</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>integerValue <span class=\"token operator\">>=</span> <span class=\"token constant\">INT_MAX</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">INT_MAX</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> integerValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<iframe height=\"1000px\" width=\"100%\" src=\"https://repl.it/@jagzviruz/String-to-integer?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","frontmatter":{"title":"String to integer (atoi)","date":"2020-08-31T14:30","tags":["leetcode","atoi","string conversion"],"spoiler":"Convert a given string to an integer.","keywords":["interview questions","leetcode","javascript fundamentals"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/string-to-integer","previous":{"fields":{"slug":"/longest-substring-without-repeating-characters"},"frontmatter":{"title":"Longest substring without repeating characters"}},"next":{"fields":{"slug":"/squares-of-sorted-array"},"frontmatter":{"title":"Squares of a Sorted Array"}}}},"staticQueryHashes":["436878334","676376647"]}