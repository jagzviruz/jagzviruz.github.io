{"componentChunkName":"component---src-templates-post-js","path":"/find-all-anagrams-of-string-in-another","result":{"data":{"markdownRemark":{"html":"<h2 id=\"question\" style=\"position:relative;\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h2>\n<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>\n<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>\n<p>The order of output does not matter.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Example 1:\n\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Example 2:\n\nInput:\ns: \"abab\" p: \"ab\"\n\nOutput:\n[0, 1, 2]\n\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".</code></pre></div>\n<h2 id=\"discussion\" style=\"position:relative;\"><a href=\"#discussion\" aria-label=\"discussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discussion</h2>\n<p>A naive approach for this problem would be to find all possible anagrams of the givcen string <code class=\"language-text\">p</code> and store them in an array, say <code class=\"language-text\">pAnagrams</code>.\nSince the length of all anagrams of this is going to be constant, say <code class=\"language-text\">pLen</code>, you can progressively extract substrings of length <code class=\"language-text\">pLen</code> from the\nstring <code class=\"language-text\">s</code>. Now check if it is present in the array <code class=\"language-text\">pAnagrams</code> and if it is present (<code class=\"language-text\">indexOf</code> returns a value more than -1) then store the\nindex position.</p>\n<p>This approach can work, but it involves the additional cost of generating all permutations of the string <code class=\"language-text\">p</code> which is <code class=\"language-text\">O(n^2 * n!)</code>;</p>\n<p>So let’s take a look at how we can optimise this. What we want to ensure is that the the characters and their occurence sum between two points in the string <code class=\"language-text\">s</code> is exactly\nthe same as the string <code class=\"language-text\">p</code>.</p>\n<p>eg: if the string <code class=\"language-text\">p</code> is <code class=\"language-text\">dfeghied</code> , this implies a string of length <code class=\"language-text\">8</code> will be ana anagram of <code class=\"language-text\">p</code> if,</p>\n<ul>\n<li>number of <code class=\"language-text\">d</code> = 2,</li>\n<li>number of <code class=\"language-text\">e</code> = 2,</li>\n<li>number of <code class=\"language-text\">f</code> = 1,</li>\n<li>number of <code class=\"language-text\">g</code> = 1,</li>\n<li>number of <code class=\"language-text\">h</code> = 1,</li>\n<li>number of <code class=\"language-text\">i</code> = 1</li>\n</ul>\n<h2 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p>We shall create 2 arrays of that can accomodate the character counts for each alphabet in the given strings. We shall use their <code class=\"language-text\">distance</code>\nfrom the letter <code class=\"language-text\">a</code> to identify which position in the array to use for that character.</p>\n<p><em>viz. the letter <code class=\"language-text\">e</code> is the fifth letter in the alphabet, so its occurence count will be stored in the index position <code class=\"language-text\">4</code> since arrays are\nzero indexed in Javascript.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findAnagrams</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * We get the ASCII value of the letter 'a' using the `charCodeAt` function.\n     * We then deduct the ASCII value of 'a' from the ASCII value of any letter\n     * to identify its index position.\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">CHAR_CODE_A</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">NUM_ALPHA</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NUM_ALPHA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NUM_ALPHA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pLen <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sLen <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> sumOfNumberOfChars <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> foundAt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * We first get the occurence index for the string `p` and store it in\n     * `pArray`\n     */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>pLen <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token constant\">CHAR_CODE_A</span><span class=\"token punctuation\">;</span>\n        pArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> pArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        sumOfNumberOfChars<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&lt;</span> sLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token constant\">CHAR_CODE_A</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * We advance the `slow` pointer till it finds a character that is\n         * present in the pArray;\n         */</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pArray<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> slow <span class=\"token operator\">&lt;</span> sLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            slow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            pos <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token constant\">CHAR_CODE_A</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/**\n         * As long as 'slow' is pointing at characters in the string `s` we try to find the anagrams.\n         */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> slow <span class=\"token operator\">&lt;</span> sLen <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> sPos<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> tmpSumOfCharsFound <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n            fast <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">;</span>\n            foundAt <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">;</span> <span class=\"token comment\">// `foundAt` marks the position where the first character from the string 'p' was found</span>\n\n            <span class=\"token comment\">/**\n             * We advance the `fast` pointer beginning at the position of `slow` character by character\n             * until the distance between them is less than the length of the string 'p'\n             * At the same time, we fill the sArray character with the incidents of the characters\n             */</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">-</span> slow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> pLen <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                sPos <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token constant\">CHAR_CODE_A</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pArray<span class=\"token punctuation\">[</span>sPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                sArray<span class=\"token punctuation\">[</span>sPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sArray<span class=\"token punctuation\">[</span>sPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> sArray<span class=\"token punctuation\">[</span>sPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                fast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                tmpSumOfCharsFound<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Compare the two arrays, if they are same store the point at which the subtring was found to output</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmpSumOfCharsFound <span class=\"token operator\">==</span> sumOfNumberOfChars <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">areArraysSame</span><span class=\"token punctuation\">(</span>sArray<span class=\"token punctuation\">,</span> pArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>foundAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// Reset the sArray to find a new substring.</span>\n            sArray<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            foundAt <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            slow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">areArraysSame</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> arr2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Find all anagrams of a string in another string","date":"2020-08-13T01:24","tags":["javascript","leetcode","anagrams","strings","sliding window"],"spoiler":"Given 2 strings of varying lengths, find positions of anagrams of shorter string in bigger string","keywords":["javascript","interview questions","optimal solution"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/find-all-anagrams-of-string-in-another","previous":{"fields":{"slug":"/median-of-two-sorted-arrays"},"frontmatter":{"title":"Median of two sorted arrays"}},"next":{"fields":{"slug":"/sorting"},"frontmatter":{"title":"Sorting in Javascript"}}}},"staticQueryHashes":["436878334","676376647"]}