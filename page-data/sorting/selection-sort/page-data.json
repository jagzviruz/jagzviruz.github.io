{"componentChunkName":"component---src-templates-post-js","path":"/sorting/selection-sort","result":{"data":{"markdownRemark":{"html":"<p>This is stable sort technique which divides the given array in to 2 parts â€” a sorted part and an unsorted part. In each iteration over the array, it tries to place the smallest element in the unsorted array at the beginning of it, hence expanding the sorted array by 1. The swapping is done in place so no additional space is required.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">  8, 9, 3, 20, 1, 10, 2, 3\n^\nBorder of sorting\n\nAfter first iteration.\n  1, 9, 3, 20, 8, 10, 2, 3\n  ^            -\n               | Swapped 8 with 1\n\nAfter second iteration.\n  1, 2, 3, 20, 8, 10, 9, 3\n     ^                -\n                      | Swapped 9 with 2\n\nAfter third iteration.\n  1, 2, 3, 20, 8, 10, 9, 3\n        ^\n\n\nAfter third iteration.\n  1, 2, 3, 3, 8, 10, 9, 20\n           ^            -\n                        | Swapped 20 with 3\nand so on ..</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> smallestInsertAt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// In the first iteration, the smallest will come to the head of the array.</span>\n\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>smallestInsertAt <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> smallestInsertAt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> smallestFoundAt <span class=\"token operator\">=</span> smallestInsertAt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>smallestFoundAt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        smallestFoundAt <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>smallestFoundAt <span class=\"token operator\">!==</span> smallestInsertAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>smallestFoundAt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>smallestFoundAt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>smallestInsertAt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>smallestInsertAt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    smallestInsertAt <span class=\"token operator\">=</span> smallestInsertAt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The Selection sort technique runs in quadratic time in all cases and has <strong>O(n<sup>2</sup>)</strong> time complexity and constant space complexity of <strong>O(1)</strong> as it does not use any additional space. It makes at most <strong>O(N)</strong> swaps. So it is advatageous to use in cases where the array is almost sorted or where the swapping operation is not very expensive. It has far fewer swaps than insertion sort or <a href=\"/sorting/bubble-sort\"><code class=\"language-text\">bubble sort</code></a>.</p>\n<iframe height=\"1400px\" width=\"100%\" src=\"https://repl.it/@jagzviruz/Selection-Sort?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","frontmatter":{"title":"Selection sort","date":"2020-08-16T19:49","tags":["sorting"],"spoiler":"How to perform selection sort using javascript","keywords":["sorting","selection sort","modified insertion sort"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/sorting/selection-sort","previous":{"fields":{"slug":"/sorting/bubblesort"},"frontmatter":{"title":"Bubblesort"}},"next":{"fields":{"slug":"/shortest-way-to-form-string"},"frontmatter":{"title":"Shortest way to form a string"}}}},"staticQueryHashes":["436878334","676376647"]}