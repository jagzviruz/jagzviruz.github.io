{"componentChunkName":"component---src-templates-post-js","path":"/sorting/bubblesort","result":{"data":{"markdownRemark":{"html":"<p>Bubble sort is one of the simplest sorting algorithms in computer science.\nIt is a comparision based sorting algorithm where elements are compared against\nthemselves. It is an exhaustive process where you check if two adjacent elements\nare not in ascending order, and swap them if they are not. Once you reach the end\nof the list, you restart from the beginning of the list and repeat until you have\nan iteration where no swaps were done.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * The function\n* @param {Array} list  - the list of items to be sorted.\n*/</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> didSwap<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    didSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// the element needs to be swapped to previous index;</span>\n        <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n        didSwap <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>didSwap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since Javascript passes objects by reference, the array passed in is mutated. If you do not want to modify the source array,\nyou need to clone it and return the sorted one at the end.</p>\n<p>As can be seen, we iterate over the array multiple times. Its average and worst case (descending array of elements) complexity is <strong>O(n<sup>2</sup>)</strong>. It uses no additional\nspace as all swaps are done in place. The performance can be marginally improved by skipping the last element in progressive loops\nas the biggest element settles at the end of each iteration.</p>","frontmatter":{"title":"Bubblesort","date":"2020-08-16T12:35","tags":["sorting","bubble-sort"],"spoiler":"A short article on how to perform \"bubble sort\" in Javascript","keywords":["sorting","bubble-sort","beginner javascript"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/sorting/bubblesort","previous":{"fields":{"slug":"/sorting"},"frontmatter":{"title":"Sorting in Javascript"}},"next":{"fields":{"slug":"/sorting/selection-sort"},"frontmatter":{"title":"Selection sort"}}}},"staticQueryHashes":["436878334","676376647"]}