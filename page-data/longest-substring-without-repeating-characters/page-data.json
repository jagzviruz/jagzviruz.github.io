{"componentChunkName":"component---src-templates-post-js","path":"/longest-substring-without-repeating-characters","result":{"data":{"markdownRemark":{"html":"<h3 id=\"question\" style=\"position:relative;\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h3>\n<p>Given a string, find the length of the longest substring without repeating characters.</p>\n<p><em>Example 1:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.</code></pre></div>\n<p><em>Example 2:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.</code></pre></div>\n<p><em>Example 3:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Input: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</code></pre></div>\n<h3 id=\"discussion\" style=\"position:relative;\"><a href=\"#discussion\" aria-label=\"discussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discussion</h3>\n<p>We store every encountered character in a hashmap. If you encounter a character that is already present in the hashmap, store the substring as the current string to be checked for longest matching string. Now remove all characters before this duplicate characters from the hashmap.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">Str : adefbcdfgh\nHashmap : {}\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n  ^             hashmap: { a: 0 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n   ^            hashmap: { a: 0, d: 1 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n    ^           hashmap: { a: 0, d: 1, e: 2 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n     ^          hashmap: { a: 0, d: 1, e: 2, f: 3 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n      ^         hashmap: { a: 0, d: 1, e: 2, f: 3, b: 4 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n       ^        hashmap: { a: 0, d: 1, e: 2, f: 3, b: 4, c: 5 }\n\n<span class=\"token list punctuation\">-</span> adefbcdfgh\n        ^       Duplicate found for 'd' with value 1\nDelete all characters in the hashmap that were found before the point where the first 'd' i.e 1\n\n<span class=\"token list punctuation\">-</span> ad | efbcdfgh\n       ^   ^    hashmap: { d: 6, e: 2, f: 3, b: 4, c: 5 }\n\n<span class=\"token list punctuation\">-</span> ad | efbcdfgh\n       ^    ^   Duplicate found for 'f' with value 3\n\n<span class=\"token list punctuation\">-</span> adef | bcdfgh\n         ^  ^   hashmap: { d: 6, f: 7, b: 4, c: 5 }\n\n<span class=\"token list punctuation\">-</span> adef | bcdfgh\n         ^   ^  hashmap: { d: 6, f: 7, b: 4, c: 5, g: 8 }\n\n<span class=\"token list punctuation\">-</span> adef | bcdfgh\n         ^    ^ hashmap: { d: 6, f: 7, b: 4, c: 5, g: 8, h: 9 }</code></pre></div>\n<h3 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numLetters <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> seenHash <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> currStr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> longestSubstring<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  seenHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> fp<span class=\"token operator\">&lt;</span> numLetters<span class=\"token punctuation\">;</span> fp<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sp <span class=\"token operator\">===</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          fp <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>seenHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// move sp to character after matched string.</span>\n          sp <span class=\"token operator\">=</span> seenHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">// delete all character from seenhash that occurred before this new pointer.</span>\n          Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>seenHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">delete</span> seenHash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           seenHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        currStr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> fp<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        seenHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>longestSubstring<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> currStr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        longestSubstring <span class=\"token operator\">=</span> currStr<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>longestSubstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> longestSubstring<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<iframe height=\"1000px\" width=\"100%\" src=\"https://repl.it/@jagzviruz/Longest-substring-without-repeating-characters?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","frontmatter":{"title":"Longest substring without repeating characters","date":"2020-08-31T09:44","tags":["leetcode","javascript","longest substring","sliding window"],"spoiler":"Find the length of the longest substring without repeating characters.","keywords":["leetcode","javascript","longest substring","sliding window","interview questions","non repeating characters","hashmap"]}},"site":{"siteMetadata":{"siteUrl":"https://jagadishk.dev","social":{"twitterHandle":"@jagzviruz"}}}},"pageContext":{"slug":"/longest-substring-without-repeating-characters","previous":{"fields":{"slug":"/max-min-stack"},"frontmatter":{"title":"Implement a Max/Min Stack"}},"next":{"fields":{"slug":"/string-to-integer"},"frontmatter":{"title":"String to integer (atoi)"}}}},"staticQueryHashes":["436878334","676376647"]}